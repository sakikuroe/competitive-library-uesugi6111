var searchIndex = JSON.parse('{\
"competitive_library":{"doc":"","i":[[0,"algorithm","competitive_library","",null,null],[0,"atkin","competitive_library::algorithm","",null,null],[5,"sieve_of_atkin","competitive_library::algorithm::atkin","",null,[[["u64",15]],[["bool",15],["vec",3]]]],[0,"cumsum","competitive_library::algorithm","",null,null],[5,"cumsum","competitive_library::algorithm::cumsum","",null,[[],[["vec",3],["i64",15]]]],[0,"enumdivisors","competitive_library::algorithm","",null,null],[5,"enum_divisors","competitive_library::algorithm::enumdivisors","約数列挙",null,[[["i64",15]],[["vec",3],["i64",15]]]],[0,"eratosthenes","competitive_library::algorithm","",null,null],[5,"sieve","competitive_library::algorithm::eratosthenes","エラトステネスの篩 少し早い …",null,[[["usize",15]],[["usize",15],["vec",3]]]],[5,"sieve_liner","","素因数列挙",null,[[["usize",15]],[["usize",15],["vec",3]]]],[3,"Eratosthenes","","エラトステネスの篩",null,null],[11,"new","","初期化",0,[[]]],[11,"generate","","素数フラグを処理",0,[[["usize",15]]]],[11,"count","","素数の個数をカウント",0,[[],["usize",15]]],[11,"primes","","フラグから素数配列を生成",0,[[],[["usize",15],["vec",3]]]],[0,"inversionnumber","competitive_library::algorithm","",null,null],[5,"inversion_number","competitive_library::algorithm::inversionnumber","",null,[[],["i64",15]]],[0,"largestrectangle","competitive_library::algorithm","",null,null],[5,"largest_rectangle","competitive_library::algorithm::largestrectangle","",null,[[],["i64",15]]],[0,"prime","competitive_library::algorithm","",null,null],[5,"trial_division","competitive_library::algorithm::prime","試割",null,[[["i64",15]],[["i64",15],["hashmap",3]]]],[0,"run_length","competitive_library::algorithm","",null,null],[5,"compress","competitive_library::algorithm::run_length","",null,[[["str",15]],["vec",3]]],[0,"graph","competitive_library","",null,null],[0,"dijkstra","competitive_library::graph","",null,null],[5,"dijkstra","competitive_library::graph::dijkstra","",null,[[["usize",15]],[["i64",15],["option",4]]]],[0,"floydwarshall","competitive_library::graph","",null,null],[5,"floyd_warshall","competitive_library::graph::floydwarshall","",null,[[],[["vec",3],["vec",3]]]],[0,"util","competitive_library::graph","",null,null],[5,"to_adjacency_matrix","competitive_library::graph::util","",null,[[],[["vec",3],["vec",3]]]],[5,"adjacency_list","","",null,[[],[["vec",3],["vec",3]]]],[0,"math","competitive_library","",null,null],[0,"euclid","competitive_library::math","",null,null],[5,"gcd","competitive_library::math::euclid","",null,[[["i64",15]],["i64",15]]],[5,"lcm","","",null,[[["i64",15]],["i64",15]]],[0,"modpow","competitive_library::math","",null,null],[5,"modpow","competitive_library::math::modpow","",null,[[["i64",15]],["i64",15]]],[0,"permutation","competitive_library::math","",null,null],[5,"make_permutation","competitive_library::math::permutation","",null,[[["usize",15]],[["vec",3],["vec",3]]]],[0,"string","competitive_library","",null,null],[0,"rollinghash","competitive_library::string","",null,null],[5,"rolling_hash","competitive_library::string::rollinghash","",null,[[],["bool",15]]],[0,"structure","competitive_library","",null,null],[0,"cumsum2d","competitive_library::structure","",null,null],[3,"CumSum2D","competitive_library::structure::cumsum2d","",null,null],[11,"new","","",1,[[]]],[11,"query","","",1,[[["usize",15]],["i64",15]]],[0,"dsu","competitive_library::structure","",null,null],[3,"Dsu","competitive_library::structure::dsu","UnionFind",null,null],[11,"new","","",2,[[["usize",15]],["dsu",3]]],[11,"root","","",2,[[["usize",15]],["usize",15]]],[11,"unite","","",2,[[["usize",15]],["bool",15]]],[11,"is_same","","",2,[[["usize",15]],["bool",15]]],[11,"size","","",2,[[["usize",15]],["usize",15]]],[11,"get_same_group","","",2,[[["usize",15]],[["usize",15],["hashset",3]]]],[11,"get_all_groups","","",2,[[],[["usize",15],["hashmap",3],["hashset",3]]]],[0,"fenwicktree","competitive_library::structure","",null,null],[3,"FenwickTree","competitive_library::structure::fenwicktree","binaryIndexTree",null,null],[11,"new","","",3,[[["usize",15]],["fenwicktree",3]]],[11,"add","","",3,[[["usize",15]]]],[8,"Sum","","",null,null],[10,"sum","","",4,[[]]],[0,"segmenttree","competitive_library::structure","",null,null],[8,"Monoid","competitive_library::structure::segmenttree","",null,null],[16,"T","","",5,null],[10,"identity_element","","",5,[[]]],[10,"binary_operation","","",5,[[]]],[3,"Min","","",null,null],[3,"Max","","",null,null],[3,"SegmentTree","","",null,null],[11,"new","","",6,[[["usize",15]],["segmenttree",3]]],[11,"query","","",6,[[["usize",15]]]],[11,"set","","",6,[[["usize",15]]]],[11,"get","","",6,[[["usize",15]]]],[11,"max_right","","",6,[[["usize",15]],["usize",15]]],[11,"min_left","","",6,[[["usize",15]],["usize",15]]],[0,"sparsetable","competitive_library::structure","",null,null],[3,"SparseTable","competitive_library::structure::sparsetable","",null,null],[11,"new","","",7,[[]]],[11,"query","","",7,[[["usize",15]],["i64",15]]],[11,"from","competitive_library::algorithm::eratosthenes","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","competitive_library::structure::cumsum2d","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","competitive_library::structure::dsu","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","competitive_library::structure::fenwicktree","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","competitive_library::structure::segmenttree","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","competitive_library::structure::sparsetable","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"sum","competitive_library::structure::fenwicktree","",3,[[["usize",15]]]],[11,"sum","","",3,[[]]],[11,"identity_element","competitive_library::structure::segmenttree","",8,[[]]],[11,"binary_operation","","",8,[[]]],[11,"identity_element","","",9,[[]]],[11,"binary_operation","","",9,[[]]],[11,"from","","",6,[[["vec",3]]]],[11,"clone","competitive_library::structure::cumsum2d","",1,[[],["cumsum2d",3]]],[11,"clone","competitive_library::structure::dsu","",2,[[],["dsu",3]]],[11,"clone","competitive_library::structure::fenwicktree","",3,[[],["fenwicktree",3]]],[11,"default","competitive_library::algorithm::eratosthenes","",0,[[]]],[11,"fmt","competitive_library::structure::cumsum2d","",1,[[["formatter",3]],["result",6]]],[11,"fmt","competitive_library::structure::dsu","",2,[[["formatter",3]],["result",6]]],[11,"fmt","competitive_library::structure::fenwicktree","",3,[[["formatter",3]],["result",6]]]],"p":[[3,"Eratosthenes"],[3,"CumSum2D"],[3,"Dsu"],[3,"FenwickTree"],[8,"Sum"],[8,"Monoid"],[3,"SegmentTree"],[3,"SparseTable"],[3,"Min"],[3,"Max"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);